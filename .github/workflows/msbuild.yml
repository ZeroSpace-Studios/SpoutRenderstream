name: MSBuild

on:
  push:
    tags: "v*"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        msbuild-architecture: x64
    - name: Setup Cmake
      uses: lukka/get-cmake@latest
    - name: Restore artifacts, or setup vcpkg (do not install any package)
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: 703a8113f42e794534df5dfc5cece5dabcb949d0
    - name: Integrate vcpkg
      working-directory: ${{env.GITHUB_WORKSPACE}}/vcpkg
      run: ./vcpkg.exe integrate install --vcpkg-root ${{env.GITHUB_WORKSPACE}}/vcpkg
    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} /p:VcpkgEnableManifest=true /p:PostBuildEvent=
    - name: RemoveDebugs
      run: rm build/x64/Release/*.pdb
    - name: Copy DLLs
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: cp Spout.dll build/x64/Release/
      
    - name: Save Folder
      uses: actions/upload-artifact@v3
      with:
        name: upload
        path: build/x64/Release/
      
  upload-release:

    runs-on: ubuntu-20.04
    needs: [build]

    steps:
    - uses: actions/checkout@v1
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Newest Push
        draft: false
        prerelease: false
    - name: download artifacts
      uses: actions/download-artifact@v1
      with:
        name: upload
    - name: rename
      run: mv ./upload ./SpoutBridge
    - name: compress folder
      run: zip ./SpoutBridge.zip ./SpoutBridge
    - name: upload windows
      id: upload-windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./SpoutBridge.zip
        asset_name: SpoutBridge.zip
        asset_content_type: application/zip
